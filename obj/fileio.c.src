	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_exists_file
_exists_file:
	ld	hl, -6
	call	__frameset
	ld	de, (ix + 6)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_1
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	xor	a, a
	pop	hl
	jq	BB0_9
BB0_1:
	ld	hl, 0
	ld	(ix + -3), hl
BB0_2:
	push	de
	pea	ix + -3
	call	_ti_Detect
	ld	de, (ix + 6)
	push	hl
	pop	bc
	pop	hl
	pop	hl
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_4
	push	de
	push	bc
	ld	(ix + -6), bc
	call	_strcmp
	ld	bc, (ix + -6)
	pop	de
	pop	de
	ld	de, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_2
BB0_4:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_5
	ld	a, 0
	jq	BB0_7
BB0_5:
	ld	a, 1
BB0_7:
BB0_9:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_new_file
_new_file:
	ld	hl, -12
	call	__frameset
	ld	hl, (ix + 6)
	xor	a, a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_2
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	jq	BB1_16
BB1_2:
	ld	(ix + -6), a
	push	hl
	call	_strlen
	pop	de
	ld	bc, 65535
	call	__iand
	ld	(ix + -9), hl
	ld	de, 2
	add	hl, de
	dec	de
	push	de
	push	hl
	call	_calloc
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix + -3), hl
	jq	nz, BB1_4
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	ld	de, (ix + -3)
	pop	hl
	jq	BB1_11
BB1_4:
	ld	de, (ix + -9)
	push	de
	ld	de, (ix + 6)
	push	de
	push	hl
	call	_memcpy
	ld	e, 48
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -9)
	inc	hl
	ld	(ix + -12), hl
	ld	d, 1
BB1_5:
	ld	a, e
	cp	a, 58
	jq	z, BB1_9
	ld	hl, (ix + -3)
	push	hl
	ld	(ix + -9), e
	call	_exists_file
	ld	c, 1
	ld	d, c
	ld	e, (ix + -9)
	pop	hl
	xor	a, d
	bit	0, a
	ld	a, 1
	jq	nz, BB1_8
	ld	hl, (ix + -3)
	ld	bc, (ix + -12)
	add	hl, bc
	ld	(hl), e
	ld	a, (ix + -6)
BB1_8:
	inc	e
	ld	(ix + -6), a
	jq	BB1_5
BB1_9:
	ld	a, (ix + -6)
	and	a, 1
	xor	a, d
	bit	0, a
	ld	de, (ix + -3)
	jq	nz, BB1_15
BB1_11:
	ld	hl, L_.str
	push	hl
	push	de
	call	_ti_Open
	ld	(ix + -6), a
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	inc	hl
	push	hl
	call	_strlen
	pop	de
	ld	de, 4
	add	hl, de
	push	hl
	call	_malloc
	ld	c, (ix + -6)
	pop	de
	ld	a, c
	or	a, a
	jq	z, BB1_14
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_14
	ld	de, 3
	ld	(hl), c
	ld	(ix + -6), hl
	ld	iy, (ix + -6)
	inc	iy
	push	de
	ld	hl, L_.str
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	push	hl
	ld	iy, (ix + -6)
	pea	iy + 4
	call	_strcpy
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	push	hl
	call	_free
	pop	hl
	ld	hl, (ix + -6)
	jq	BB1_16
BB1_14:
	ld	hl, (ix + -3)
	push	hl
	call	_free
	pop	hl
BB1_15:
	ld	hl, 0
BB1_16:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_open_file
_open_file:
	ld	hl, -4
	call	__frameset
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_4
	ld	de, L_.str.1
	push	de
	push	hl
	call	_ti_Open
	ld	(ix + -4), a
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	inc	hl
	push	hl
	call	_strlen
	pop	de
	ld	de, 4
	add	hl, de
	push	hl
	call	_malloc
	pop	bc
	ld	a, (ix + -4)
	or	a, a
	jq	nz, BB2_4
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_4
	ld	bc, 3
	ld	(hl), 0
	push	hl
	pop	iy
	ld	(ix + -3), iy
	inc	iy
	push	bc
	ld	hl, L_.str.1
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	ld	iy, (ix + -3)
	pea	iy + 4
	call	_strcpy
	pop	hl
	jq	BB2_5
BB2_4:
	ld	hl, 0
	ld	(ix + -3), hl
	dec	hl
	push	hl
	call	_os_ThrowError
BB2_5:
	pop	hl
	ld	hl, (ix + -3)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_close_file
_close_file:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_2
	ld	a, (hl)
	ld	e, a
	push	de
	ld	(ix + -3), hl
	call	_ti_Close
	pop	hl
	ld	hl, (ix + -3)
	push	hl
	call	_free
	pop	hl
BB3_2:
	ld	hl, -1
	ld	(ix + 6), hl
	pop	hl
	pop	ix
	jp	_os_ThrowError
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_read_file
_read_file:
	ld	hl, -15
	call	__frameset
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, -1
	jq	z, BB4_8
	ld	iy, L___const.read_file.mallowed
	ld	de, 12
	lea	bc, ix + -12
	ld	(ix + -15), bc
	push	de
	push	iy
	push	bc
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	inc	hl
	ld	de, 3
	push	de
	ld	de, (ix + -15)
	push	de
	push	hl
	call	_contain_string
	pop	hl
	pop	hl
	pop	hl
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB4_10
	ld	e, (ix + 9)
	ld	d, (ix + 10)
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	ld	(ix + -15), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	l, a
	push	hl
	call	_ti_GetSize
	pop	de
	ld	e, (ix + 9)
	ld	d, (ix + 10)
	or	a, a
	sbc.sis	hl, de
	ld	hl, -1
	push	hl
	call	c, _os_ThrowError
	pop	hl
	ld	hl, (ix + -15)
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_5
	ld	de, -1
BB4_8:
	push	de
	call	_os_ThrowError
	pop	hl
	ld	hl, 0
	jq	BB4_9
BB4_10:
	ld	hl, 0
	jq	BB4_6
BB4_5:
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	l, a
	push	hl
	ld	hl, (ix + -15)
	push	hl
	ld	hl, 8
	push	hl
	push	de
	ld	(ix + -15), de
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -15)
BB4_6:
BB4_9:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_write_file
_write_file:
	ld	hl, -15
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB5_2
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB5_6
BB5_2:
	ld	iy, L___const.write_file.mallowed
	ld	de, 12
	lea	hl, ix + -12
	ld	(ix + -15), hl
	push	de
	push	iy
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	inc	hl
	ld	de, 3
	push	de
	ld	de, (ix + -15)
	push	de
	push	hl
	call	_contain_string
	pop	hl
	pop	hl
	pop	hl
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB5_8
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	l, a
	push	hl
	call	_ti_GetSize
	pop	de
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	e, 0
	push	bc
	pop	hl
	ld	bc, (ix + 12)
	ld	a, (ix + 15)
	call	__lcmpu
	ld	hl, -1
	push	hl
	call	c, _os_ThrowError
	pop	hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	l, a
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, 8
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	jq	BB5_7
BB5_6:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
BB5_7:
	pop	hl
BB5_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_get_ptr_file
_get_ptr_file:
	call	__frameset0
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_2
	ld	l, (hl)
	ld	a, l
	or	a, a
	jq	nz, BB6_3
BB6_2:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	ld	hl, 0
	jq	BB6_4
BB6_3:
	push	hl
	call	_ti_GetDataPtr
BB6_4:
	pop	de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"w+",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"r+",000o

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"r",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"a+",000o

	section	.rodata,"a",@progbits
	private	L___const.read_file.mallowed
L___const.read_file.mallowed:
	dl	L_.str.2
	dl	L_.str.1
	dl	L_.str
	dl	L_.str.3

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"w",000o

	section	.rodata,"a",@progbits
	private	L___const.write_file.mallowed
L___const.write_file.mallowed:
	dl	L_.str.4
	dl	L_.str.1
	dl	L_.str
	dl	L_.str.3

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	_ti_Detect
	extern	__frameset
	extern	_malloc
	extern	_strcmp
	extern	_ti_Write
	extern	_ti_Close
	extern	_contain_string
	extern	_memcpy
	extern	_strlen
	extern	_ti_Read
	extern	__Unwind_SjLj_Unregister
	extern	__iand
	extern	_strcpy
	extern	_ti_Open
	extern	_ti_GetSize
	extern	_ti_GetDataPtr
	extern	_calloc
	extern	__lcmpu
	extern	_free
	extern	__frameset0
	extern	_os_ThrowError
